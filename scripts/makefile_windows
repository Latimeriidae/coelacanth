# This makefile only has helper targets, it is not meant to handle dependencies --- this is cmake's job
SHELL := pwsh.exe
.SHELLFLAGS := -Command

BUILD_DIR ?= build
BUILD_TARGET ?= ALL_BUILD
BUILD_TYPE ?= Debug
INSTALL_PREFIX ?= $(BUILD_DIR)/install
TOOLCHAIN ?= msvc

PARALLEL ?= ON
VERBOSE ?= ON

CORES != (Get-CimInstance -ClassName Win32_ComputerSystem).NumberOfLogicalProcessors
PARALLEL_OPTION != if("$(PARALLEL)" -eq "ON"){return "--parallel $(CORES)"}else{return "--parallel 1"}
VERBOSE_OPTION != if("$(VERBOSE)" -eq "ON"){return "--verbose"}

.PHONY: all
all: \
	conan \
	config \
	build \
	test \
	install \

.PHONY: conan
conan:
	$$($$PROFILE = python .\scripts\pick_conan_profile.py "vs_$(TOOLCHAIN)") || $$(throw); <#\
	#> echo "Conan profile picked: $$PROFILE"; <#\
	#> conan install <#\
		#> --profile:host $$PROFILE <#\
		#> --profile:build $$PROFILE <#\
		#> --settings build_type=$(BUILD_TYPE) <#\
		#> --build missing <#\
		#> --install-folder $(BUILD_DIR) <#\
		#> scripts/conanfile.py <#\
		#>

.PHONY: config
config:
	cmake <#\
		#> -S . <#\
		#> -B "$(BUILD_DIR)" <#\
		#> -DCMAKE_TOOLCHAIN_FILE="conan_toolchain.cmake" <#\
		#>

.PHONY: build
build:
	cmake <#\
		#> --build "$(BUILD_DIR)" <#\
		#> --config $(BUILD_TYPE) <#\
		#> --target "$(BUILD_TARGET)" <#\
		#> $(PARALLEL_OPTION) <#\
		#> $(VERBOSE_OPTION) <#\
		#>

.PHONY: test
test:
	ctest --build-config $(BUILD_TYPE) --test-dir "$(BUILD_DIR)" $(PARALLEL_OPTION) $(VERBOSE_OPTION)

.PHONY: install
install:
	cmake --install "$(BUILD_DIR)" --config $(BUILD_TYPE) --prefix $(INSTALL_PREFIX) $(VERBOSE_OPTION)

###################### docker support ######################
TARGET ?=
COMMAND ?=
DOCKER_ADMIN ?= false
DOCKER_CONAN_CACHE ?= $$HOME/.conan/data
DOCKER_ISOLATION ?= hyperv # process or hyperv

DOCKER_IMAGE_TAG := rudenkornk/docker_cpp_windows:0.2.2
DOCKER_CONTAINER_NAME := $(PROJECT_NAME)_container
DOCKER_CONTAINER := $(BUILD_DIR)/$(DOCKER_CONTAINER_NAME)
DOCKER_CONTAINER_USER != if("$(DOCKER_ADMIN)".ToLower() -ne "true"){return "ContainerUser"}else{return "ContainerAdministrator"}
DOCKER_COMMAND != if('$(COMMAND)'){return '$$(COMMAND)'}else{return 'make $$(TARGET)'}

DOCKERD_UP != try{Set-Variable -Name ErrorActionPreference -Value stop -Scope Private; if((Get-Command docker) -and (Get-Process dockerd)){return $$true}}Catch{return $$false}

DOCKER_CONTAINER_ID != if($$$(DOCKERD_UP)){return (docker container ls --quiet --all --filter name="^/$(DOCKER_CONTAINER_NAME)$$")}
DOCKER_CONTAINER_STATE != if($$$(DOCKERD_UP)){return (docker container ls --format "{{.State}}" --all --filter name="^/$(DOCKER_CONTAINER_NAME)$$")}
DOCKER_CONTAINER_RUN_STATUS != if("$(DOCKER_CONTAINER_STATE)" -ne "running"){return "$(DOCKER_CONTAINER)_not_running"}
.PHONY: $(DOCKER_CONTAINER)_not_running
$(DOCKER_CONTAINER): $(DOCKER_CONTAINER_RUN_STATUS)
ifneq ($(DOCKER_CONTAINER_ID),)
	docker container rename $(DOCKER_CONTAINER_NAME) $(DOCKER_CONTAINER_NAME)_$(DOCKER_CONTAINER_ID)
endif
	New-Item -Force -ItemType "directory" -Path "$(DOCKER_CONAN_CACHE)"
	docker run --interactive --tty --detach <#\
		#> --name $(DOCKER_CONTAINER_NAME) <#\
		#> --user $(DOCKER_CONTAINER_USER) <#\
		#> --mount type=bind,source="$$(Get-Location)",target=C:\repo <#\
		#> --mount type=bind,source="$$(Resolve-Path $(DOCKER_CONAN_CACHE))",target=C:\Users\$(DOCKER_CONTAINER_USER)\.conan\data <#\
		#> --isolation=$(DOCKER_ISOLATION) <#\
		#> --memory 8G <#\
		#> $(DOCKER_IMAGE_TAG)
	New-Item -Force -Name "$@" -ItemType File

.PHONY: container
container: $(DOCKER_CONTAINER)

.PHONY: in_docker
in_docker: $(DOCKER_CONTAINER)
	docker exec <#\
		#> --env BUILD_DIR="$(BUILD_DIR)" <#\
		#> --env BUILD_TARGET="$(BUILD_TARGET)" <#\
		#> --env BUILD_TYPE="$(BUILD_TYPE)" <#\
		#> --env INSTALL_PREFIX="$(INSTALL_PREFIX)" <#\
		#> --env TOOLCHAIN="$(TOOLCHAIN)" <#\
		#> <#\
		#> --env PARALLEL="$(PARALLEL)" <#\
		#> --env VERBOSE="$(VERBOSE)" <#\
		#> <#\
		#> --user $(DOCKER_CONTAINER_USER) <#\
		#> $(DOCKER_CONTAINER_NAME) <#\
		#> pwsh -Command 'C:\vs_exec.bat $(DOCKER_COMMAND)'

