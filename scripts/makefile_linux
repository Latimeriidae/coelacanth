# This makefile only has helper targets, it is not meant to handle dependencies --- this is cmake's job
SHELL = /usr/bin/env bash

BUILD_DIR ?= build
BUILD_TARGET ?= all
BUILD_TYPE ?= Debug
GENERATOR ?= Ninja Multi-Config
INSTALL_PREFIX ?= $(BUILD_DIR)/install
TOOLCHAIN ?= gcc

PARALLEL ?= ON
VERBOSE ?= ON

CORES != nproc --all
PARALLEL_OPTION != [[ "$(PARALLEL)" == "ON" ]] && echo "--parallel $(CORES)"
JPARALLEL_OPTION != [[ "$(PARALLEL)" == "ON" ]] && echo "-j$(CORES)"
VERBOSE_OPTION != [[ "$(VERBOSE)" == "ON" ]] && echo "--verbose"

.PHONY: conan
conan:
	conan install \
		--profile:host $(TOOLCHAIN).jinja \
		--profile:build $(TOOLCHAIN).jinja \
		--settings build_type=$(BUILD_TYPE) \
		--build missing \
		--install-folder $(BUILD_DIR) \
		scripts/conanfile.py \

.PHONY: config
config:
	cmake \
		 -S . \
		 -B "$(BUILD_DIR)" \
		 -G "$(GENERATOR)" \
		 -DCMAKE_TOOLCHAIN_FILE="conan_toolchain.cmake" \

.PHONY: compile_commands
compile_commands:
	cmake \
		 -S . \
		 -B "$(BUILD_DIR)/compile_commands" \
		 -G "$(GENERATOR)" \
		 -DCMAKE_CONFIGURATION_TYPES=$(BUILD_TYPE) \
		 -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
		 -DCMAKE_TOOLCHAIN_FILE="$(BUILD_DIR)/conan_toolchain.cmake" \
	
	ln --symbolic "$(BUILD_DIR)/compile_commands/compile_commands.json" compile_commands.json

.PHONY: build
build:
	cmake \
		--build "$(BUILD_DIR)" \
		--config $(BUILD_TYPE) \
		--target $(BUILD_TARGET) \
		$(PARALLEL_OPTION) \
		$(VERBOSE_OPTION) \

.PHONY: test
test:
	ctest --build-config $(BUILD_TYPE) --test-dir "$(BUILD_DIR)" $(PARALLEL_OPTION) $(VERBOSE_OPTION)

.PHONY: install
install:
	cmake --install "$(BUILD_DIR)" --config $(BUILD_TYPE) --prefix $(INSTALL_PREFIX) $(VERBOSE_OPTION)


###################### linters ######################
CLANG_FORMAT_OUTPUT ?= in_place
CLANG_TIDY_OUTPUT ?= patch
COMMIT ?= origin/main

CLANG_FORMAT_OUTPUT_ARG != [[ "$(CLANG_FORMAT_OUTPUT)" == "in_place" ]] && echo "-i" || echo "> $(CLANG_FORMAT_OUTPUT)"
CLANG_TIDY_OUTPUT_ARG != [[ "$(CLANG_TIDY_OUTPUT)" == "in_place" ]] && echo "-fix" || echo "-export-fixes $(CLANG_TIDY_OUTPUT)"

.PHONY: clang-format
clang-format:
	git diff -U0 --no-color --relative $(COMMIT) | clang-format-diff -p1 $(CLANG_FORMAT_OUTPUT_ARG)

.PHONY: clang-tidy
clang-tidy:
	git diff -U0 --no-color --relative $(COMMIT) | clang-tidy-diff.py $(JPARALLEL_OPTION) -p1 -path $(BUILD_DIR)/compile_commands $(CLANG_TIDY_OUTPUT_ARG)


###################### docker support ######################
TARGET ?=
COMMAND ?=
DOCKER_ADMIN ?= false
DOCKER_CONAN_CACHE ?= $$HOME/.conan/data
DOCKER_KEEP_CI_USER_SUDO ?= false

DOCKER_IMAGE_TAG := rudenkornk/docker_cpp:0.2.2
DOCKER_CONTAINER_NAME := $(PROJECT_NAME)_container
DOCKER_CONTAINER := $(BUILD_DIR)/$(DOCKER_CONTAINER_NAME)
DOCKER_CONTAINER_USER != [[ "$(DOCKER_ADMIN)" != "true" ]] && echo "ci_user" || echo "root"

IF_DOCKERD_UP := command -v docker &> /dev/null && pidof dockerd &> /dev/null

DOCKER_CONTAINER_ID != $(IF_DOCKERD_UP) && docker container ls --quiet --all --filter name=^/$(DOCKER_CONTAINER_NAME)$
DOCKER_CONTAINER_STATE != $(IF_DOCKERD_UP) && docker container ls --format {{.State}} --all --filter name=^/$(DOCKER_CONTAINER_NAME)$
DOCKER_CONTAINER_RUN_STATUS != [[ "$(DOCKER_CONTAINER_STATE)" != "running" ]] && echo "$(DOCKER_CONTAINER)_not_running"
.PHONY: $(DOCKER_CONTAINER)_not_running
$(DOCKER_CONTAINER): $(DOCKER_CONTAINER_RUN_STATUS)
ifneq ($(DOCKER_CONTAINER_ID),)
	docker container rename $(DOCKER_CONTAINER_NAME) $(DOCKER_CONTAINER_NAME)_$(DOCKER_CONTAINER_ID)
endif
	mkdir --parents "$(DOCKER_CONAN_CACHE)"
	docker run --interactive --tty --detach \
		--env BUILD_DIR="$(BUILD_DIR)" \
		--env BUILD_TYPE="$(BUILD_TYPE)" \
		--env BUILD_TARGET="$(BUILD_TARGET)" \
		--env GENERATOR="$(GENERATOR)" \
		--env INSTALL_PREFIX="$(INSTALL_PREFIX)" \
		--env TOOLCHAIN="$(TOOLCHAIN)" \
		\
		--env PARALLEL="$(PARALLEL)" \
		--env VERBOSE="$(VERBOSE)" \
		\
		--env COMMIT="$(COMMIT)" \
		--env CLANG_FORMAT_OUTPUT="$(CLANG_FORMAT_OUTPUT)" \
		--env CLANG_TIDY_OUTPUT="$(CLANG_TIDY_OUTPUT)" \
		\
		--env KEEP_CI_USER_SUDO="$(DOCKER_KEEP_CI_USER_SUDO)" \
		--env CI_UID="$$(id --user)" --env CI_GID="$$(id --group)" \
		--env "TERM=xterm-256color" \
		--user $(DOCKER_CONTAINER_USER) \
		--name $(DOCKER_CONTAINER_NAME) \
		--mount type=bind,source="$$(pwd)",target=/home/repo \
		--mount type=bind,source="$$(realpath $(DOCKER_CONAN_CACHE))",target=/home/$(DOCKER_CONTAINER_USER)/.conan/data \
		$(DOCKER_IMAGE_TAG)
	sleep 1
	mkdir --parents $(BUILD_DIR) && touch $@

.PHONY: container
container: $(DOCKER_CONTAINER)

.PHONY: in_docker
in_docker: $(DOCKER_CONTAINER)
ifneq ($(COMMAND),)
	docker exec --user $(DOCKER_CONTAINER_USER) $(DOCKER_CONTAINER_NAME) bash -c '$(COMMAND)'
else
	docker exec --user $(DOCKER_CONTAINER_USER) $(DOCKER_CONTAINER_NAME) bash -c 'make $(TARGET)'
endif

