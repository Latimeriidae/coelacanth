name: Test workflow

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  main:
    strategy:
      matrix:
        os: [ubuntu-20.04, windows-2022]
        build_type: [Debug, Release]
        toolchain: [gcc, llvm, msvc]
        exclude:
          - os: windows-2022
            toolchain: gcc

          - os: windows-2022
            toolchain: llvm

          - os: ubuntu-20.04
            toolchain: msvc

    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Set environment
      run: |
        {
          echo "BUILD_DIR=build"
          echo "BUILD_TYPE=${{ matrix.build_type }}"
          echo "INSTALL_PREFIX=build/install"
          echo "TOOLCHAIN=${{ matrix.toolchain }}"
        } >> "$GITHUB_ENV"

        {
          echo "PARALLEL=ON"
          echo "VERBOSE=ON"

          echo "DOCKER_ISOLATION=process"
          echo "DOCKER_CONAN_CACHE=build/conan/data"
        } >> "$GITHUB_ENV"
    - name: Load cached dependecies
      uses: actions/cache@v3
      with:
        path: ${{ env.DOCKER_CONAN_CACHE }}
        key: conan_${{ runner.os }}_${{ env.BUILD_TYPE }}_${{ env.TOOLCHAIN }}_${{ hashFiles('scripts/conanfile.py') }}
        restore-keys: conan_${{ runner.os }}_${{ env.BUILD_TYPE }}_${{ env.TOOLCHAIN }}
    - name: Download and start container
      # See https://github.com/rudenkornk/docker_cpp
      # See https://github.com/rudenkornk/docker_cpp_windows
      run: make container
    - name: Cache permissions workaround
      if: ${{ runner.os == 'Windows' }}
      run: |
          make in_docker DOCKER_ADMIN=true COMMAND="icacls $DOCKER_CONAN_CACHE /q /c /t /grant ContainerUser:F"
    - name: Install dependecies
      run: make in_docker TARGET=conan
    - name: Configure
      run: make in_docker TARGET=config
    - name: Build
      run: make in_docker TARGET=build
    - name: Test
      run: make in_docker TARGET=test
    - name: Install
      run: make in_docker TARGET=install

  lint:
    if: ${{ github.event_name == 'pull_request' }}
    strategy:
      fail-fast: false
      matrix:
        tool: [clang-format, clang-tidy]
    runs-on: ubuntu-20.04
    defaults:
      run:
        shell: bash
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 2
    - name: Set environment
      run: |
        {
          echo "BUILD_DIR=build"
          echo "BUILD_TYPE=Release"
          echo "TOOLCHAIN=llvm"

          echo "PARALLEL=ON"
          echo "VERBOSE=ON"

          echo "CLANG_FORMAT_OUTPUT=patch"
          echo "CLANG_TIDY_OUTPUT=patch"
          echo "COMMIT=HEAD^"

          echo "DOCKER_ISOLATION=process"
          echo "DOCKER_CONAN_CACHE=build/conan/data"
        } >> "$GITHUB_ENV"
    - name: Load cached dependecies
      uses: actions/cache@v3
      with:
        path: ${{ env.DOCKER_CONAN_CACHE }}
        key: conan_${{ runner.os }}_${{ env.BUILD_TYPE }}_${{ env.TOOLCHAIN }}_${{ hashFiles('scripts/conanfile.py') }}
        restore-keys: conan_${{ runner.os }}_${{ env.BUILD_TYPE }}_${{ env.TOOLCHAIN }}
    - name: Download and start container
      # See https://github.com/rudenkornk/docker_cpp
      run: make container
    - name: Install dependecies
      run: make in_docker TARGET=conan
    - name: Configure
      run: make in_docker TARGET=compile_commands
    - name: Run linter
      run: make in_docker TARGET=${{ matrix.tool }}
    - name: Check
      run: |
        if [ -s patch ]; then
          cat patch
          exit 1
        fi
